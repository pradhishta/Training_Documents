#######################
Day 27: 4th Sep. 2024
#######################	

	Build Orchestration Tool - Jenkins
	
	Jenkins :::
	
	Continuous Development & Continuous Integration ::::
	
		Using DevOps Approach ::
			Developers :
			-- Create Application Source Code 
			-- Commit the Source Code to Source Code Repository like github
			
			Using DevOps Process :
			Automate ::

			- Build the code - Compile and create artifacts 					
			- Unit Testing 					
			- Promote the Application to higher testing Environment					
			- Notify the Testing/Development Team 	

		Tools :::
		
			- Eclipse based IDEs - like Eclipse for Java,Pycharm,Intellij, Visual Studio, Visual Studio Code
			- Source Code Management Tool - like github/AWS Code Commit/Azure Repos 
			- Jenkins/AzurePipeline/AWS CodeBuild/gitlab-ci
			
			
	Environment:
	
		Dev 
			Create Source Code!							--> Eclipse/GIT/GITHUB
			
		Build 
			use the code in build enviroment			--> Git 
			build - compile								--> maven
			create artitfacts							--> maven
			unit test 									--> maven,junit
			promote the artifacts to Test environment   --> Ansible/Deployment plugins/SSH
		
		Test 
			Automated QA Testing 						--> TestNG,Selenium
			Generate Test Reports 						--> TestNG,Selenium	
			Validated Test Results 						--> TestNG,Selenium
			promote the artifacts to Prod environment	--> Ansible/Deployment plugins/SSH 
		
	What is Jenkins :::
	
		Jenkins is Open-Source Build Orchestration Tool.
		Used to Automate the End-to-End Application Build and Deployments
		Using Jenkins we can create CI/CD Pipelines 
		
	Jenkins Architecture ::
	
		Jenkins is based on Master-Slave Architecture :::
		
			Jenkins_Master (VM)				==> Install Jenkins - To Create Jenkins CI/CD Pipeline Projects
				Jenkins_SlaveNode1 (VM)		==> Perform Application Builds - compile/create artifacts
						
						
		At Enterprise level :::
		
			Java Applications 
			.Net Applications
			Python Applications 

		Scenario1 :	Application Build and Release frequency is very less.
		
			Jenkins_Master (VM) 	==> Create Jenkins CI/CD Pipeline Projects & Execute the Build in same Jenkins_Master Node.
			
			
		Scenario2 : Muliple Applications with high Build and Release frequencies.
			
			Jenkins_Master (VM)			==> To Create Jenkins CI/CD Pipeline Projects and schedule to the builds in the slave_nodes
																	
				Jenkins_SlaveNode1 (VM)	==> Perform Application Builds - Java Applications 
				Jenkins_SlaveNode2 (VM)	==> Perform Application Builds - .Net Applications			
				Jenkins_SlaveNode3 (VM)	==> Perform Application Builds - Python Applications 
				Jenkins_SlaveNode4 (VM)	==> Perform Application Builds - Angular/NodeJS
				Jenkins_SlaveNode5 (VM)	==> Perform Application Builds - Ruby 
				
				
	CI/CD Workflow :::
	
		SCM_Checkout 
		Application Build 
		Unit Testing 
		Create Artifacts 
		Promote the Application to Test Environments
		Notify 
		Deploy to Prod 
	
	
	Working with Jenkins :::
	
		Developers' Perspective :::
			- All Developers are just the Consumers of Jenkins Tools and Services.
			- Developers can just execute/cancel/view the Jenkins jobs/Status.
		
		DevOps Perspective :::
		
			Roles & Responsibilies of DevOps Team :			
			
			Jenkins Administration 
				- Installation of Jenkins
				- Global System Configurations 
				- Tools Management 
				- User Management 
				- Security Management
				
				- Plugins Management 
				- Credential Management 
				- Master/Slave Node Configurations
				- Creation CICD Pipeline Projects 
				- Onboard Applications to use Jenkins CICD Projects  
				- Periodic Upgrade of Jenkins and its plugins 
				- Periodic Backup 
				- Troubleshooting the Issues!
				
				
	- Installation of Jenkins :::
	
		--> Jenkins can be installed in Linux - Ubuntu Machine AMI - v22.04
				https://www.jenkins.io/doc/book/installing/
				
				https://www.jenkins.io/doc/book/installing/linux/
				
			Jenkins run as a service, it runs in default port 8080 


	- Global System Configurations 
		-->	Used to setup Global System Configuration and define default properties

	- Tools Management 
	- User Management 
	- Security Management 
	
Next :::
	- Plugins Management :::
		-->	Plugins are extension to Jenkins to intergrate any external tool with Jenkins
	
	
#######################
Day 28: 5th Sep. 2024
#######################		
	
	
				- Plugins Management 
				- Credential Management 
				- Master/Slave Node Configurations
				- Creation CICD Pipeline Projects 
				- Onboard Applications to use Jenkins CICD Projects  
				- Periodic Upgrade of Jenkins and its plugins 
				- Periodic Backup 
				- Troubleshooting the Issues!

	- Plugins Management :::
		-->	Plugins are extension to Jenkins to intergrate any external tool with Jenkins
		
		
		VM 	-> Maven Build Tool 
			-> Jenkins - using Jenkins I want to perform maven build  
						- So, using Maven Plugins installed in Jenkins, Jenkins will interact with Maven Tool installed in the VM.
						
	- Credential Management ::: 
		- Used to Create the Credentials for the external tools/servers 
		
		
	- Create a Jenkins Project/Job :::
	
		- Free-Style Projects 		# It is based on the Manual Configurations 
		
		- Pipeline Project 			# It is based on the groovy Scripts to create CI/CD Pipelines 
		
		
		- Handling Variables :::
	
			- Environment Variables :::
				- Pre-defined / reserved keywords that holds the jobs related details.
			
			- User-Defined Variables :::
			
				a = 5 
			
				"${var1}"
				
	
		- Pipeline Project 	

			Pipelines :: ==> 	are written using groovy scripts 
								used to perform CI/CD Automation.
			
				- Scripted Pipelines ::
				
						- 
				
				- Declarative Pipelines :: Simplified version of Scripted Pipelines 
		
		
			Pipelines are the composed of various stages 
			
				Stages are composed of various steps/tasks 


	CI/CD Workflow :::
	
		SCM_Checkout 
		Application Build 
		Unit Testing 
		Create Artifacts 
		Promote the Application to Test Environments
		Notify 
		Deploy to Prod 				



		
pipeline {
    agent any

    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM Checkout'
            }
        }
        stage('Application Build') {
            steps {
                echo 'Perform Application Build'
            }
        }
        stage('Deploy to Test Environment') {
            steps {
                echo 'Perform Deployment'
            }
        }
    }
}



#######################
Day 29: 6th Sep. 2024
#######################	


	- Master/Slave Node Configurations
	- Creation CICD Pipeline Projects 
	- Onboard Applications to use Jenkins CICD Projects 
	
	
	Scenario2 : Muliple Applications with high Build and Release frequencies.
		
		Jenkins_Master (VM)			==> To Create Jenkins CI/CD Pipeline Projects and schedule to the builds in the slave_nodes
																
			Jenkins_SlaveNode1 (VM)	==> Perform Application Builds - Java Applications 
			
			
	Environments :::
	
	Non-Prod Environments 																	Prod Environment

		Dev 	==> Developers 
					Create Source Code 
		
		Build (VM)	===> Build -> Compile, create artifacts, 
					 Unit Test the Changes
					 Promote the Changes to Test Environment
		
		Test 															=============>			Prod Servers  
			QA Testing (VM) 
					Install Web Application Servers (Tomcat/Nginx)
	
	Purpose of Jenkins Master & Slave Nodes :	
					
		Jenkins_Master 	(VM)		==> 	To Create Jenkins CI/CD Pipeline Projects and schedule to the builds in the slave_nodes
			Jenkins_SlaveNode (VM) 	==>		To Perform Application Build & Unit Testing

	Tools to be installed :
			
		Jenkins_Master 	(VM)		==>		git,jdk,jenkins	
        	Jenkins_SlaveNode (VM) 	==>		git,jdk,maven 
			
	Configuration of Jenkins Master & Slave Nodes.
	
		Jenkins_Master 	(VM)			git,jdk,jenkins	
		
        	Jenkins_SlaveNode (VM)		git,jdk,maven
				- Install the Build Tools 
				
				- Create UserName with SSH Keys 

			
	Create CICD Pipeline ::
	
		Pipeline :
		
			Stage1 		==> SCM_Checkout
			
			Stage2 		==> Application_Build 
						Maven Goals : 
							This defines the actions we perform using Maven 
						
							● mvn compile 	- to compile the source code
							● mvn test 		- to compile and execute junit test cases
							● mvn package 	- to compile, test and create artifacts in the target folder of Project Library
							● mvn clean 	- to clean the target folder.

							Eg.: 
							
							mvn clean package 			
			Stage3 		==> Deploy to Test Environment 
			

pipeline {
     agent { label 'slave1' }

    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM Checkout'
                git 'https://github.com/SA-AWS-DevOps-July24/java-mvn-springbootapp.git'
            }
        }
        stage('Application Build') {
            steps {
                echo 'Perform Application Build'
                sh 'mvn clean package'
            }
        }
        stage('Deploy to Test Environment') {
            steps {
                echo 'Perform Deployment'
            }
        }
    }
}


	Build Triggers :::
	
		It used to Automate the Job Exection.
		
		-> Build Periodic					# https://crontab.guru/
		
			- Used to trigger the jenkins jobs irrespective of code change. - It is not meant for CI/CD.
			- The build is sheduled based on the crontab 
			
			Non-Prod Environments 										Prod Environment
			 Shd be available only during business hrs 
				DEV Servers 
				BUILD
				QA/UAT 														Prod Servers 
				
				
				8AM - 10PM 
		
		
		-> Github Webhook 
		
			- Used to trigger the jenkins Job whenever there is any commit happened in the remote repository
			- github webhook has be configured in the remote repository by using the jenkins URL
		
		
		-> Poll-SCM 
		
			- It is used to trigger the build based on the crontab only if there is any changes happened in the source-code repository.
			
			Eg.: 
			
				Test Cycles :::
				
				
				8AM - 12PM - 3PM 
				


Next ::

	Target Server - Setup Tomcat Server!
	Email Notifications!


#######################
Day 30: 11th Sep. 2024
#######################	

	Target Server - Setup Tomcat Server!
	Email Notifications!
	

pipeline {
     agent { label 'slave1' }

    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM Checkout'
                git 'https://github.com/SA-AWS-DevOps-July24/java-mvn-springbootapp.git'
            }
        }
        stage('Application Build') {
            steps {
                echo 'Perform Application Build'
                sh 'mvn clean package'
            }
        }
        stage('Deploy to Test Environment') {
            steps {
                echo 'Perform Deployment'
            }
        }
    }
}


	What is Deployment ?
	
		--> Deployment is a process of copy the application artifacts from the source machine to the target machine.

	Environments :::
	
	Non-Prod Environments 																	Prod Environment

		Dev 	==> Developers 
					Create Source Code 
		
		Build (VM)	===> Build -> Compile, create artifacts, 
					 Unit Test the Changes
					 Promote the Changes to Test Environment
						*.war 
		
		Test 															
			QA Testing (VM) 
					Install Web Application Servers (Tomcat{8080}/Nginx{80})
	
			UAT Testing 
					Install Web Application Servers (Tomcat{8080}/Nginx{80})			=============>			Prod Servers  



		Purpose ::
		
		Jenkins_Master 	(VM)		==> 	To Create Jenkins CI/CD Pipeline Projects and schedule to the builds in the slave_nodes
			Jenkins_SlaveNode (VM) 	==>		To Perform Application Build & Unit Testing and create application artifacts 
			
		Tomcat_Server (VM)			==> 	To Run the Web-Application for further Testing 
	

		Required Tools ::
		
		Jenkins_Master 	(VM)		==> 	jdk,jenkins,git 
			Jenkins_SlaveNode (VM) 	==>		git,jdk,maven 	
			
		Tomcat_Server (VM)			==> 	jdk,tomcat		#https://tomcat.apache.org/download-80.cgi


		Workflow/Integration of Jenkins_Master, Jenkins_SlaveNode1 and Tomcat_Server


		
		
		Jenkins_Master 	(VM)		==> 	jdk,jenkins,git 
			Jenkins_SlaveNode (VM) 	==>		git,jdk,maven 	
			
		Tomcat_Server (VM)			==> 	jdk,tomcat			
		
			Jenkins_Master acts as Controller :
				- It used to create Jenkins CI/CD Pipeline Projects and schedule to the builds in the slave_nodes
				- It copy the artifacts from the slave node to the target server 


		Use Publish Over SSH Plugins on Jenkins Master to attach the Tomcat_Server to Jenkins_Master 
		
		Publish Over SSH Plugins - is  used to connect to remote server and copy the artifacts 
		
		Configure the required Connection Parameters to attach the Tomcat Server in Jenkins Master
		

	What is Deployment ?
	
		--> Deployment is a process of copy the application artifacts from the source machine to the target machine.
		
		
		Source Machine 										============>						Target Machine 
		
			Jenkins_SlaveNode																		Tomcat_Server 

		
		Source PATH :																				Target PATH :
		
			/target/*.war																				opt/tomcat/webapps
			
		Upon Deployment::
		
			/target/*.war									-------------->								opt/tomcat/webapps/*.war
																										opt/tomcat/webapps/target/*.war


pipeline {
     agent { label 'slave1' }

    stages {
        stage('SCM_Checkout') {
            steps {
                echo 'Perform SCM Checkout'
                git 'https://github.com/SA-AWS-DevOps-July24/java-mvn-springbootapp.git'
            }
        }
        stage('Application Build') {
            steps {
                echo 'Perform Application Build'
                sh 'mvn clean package'
            }
        }
        stage('Deploy to Test Environment') {
            steps {
                script{
                    sshPublisher(publishers: [sshPublisherDesc(configName: 'SA_WD_Tomcat_Server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/*.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
                }
            }
        }
    }
}

		
sshPublisher(publishers: [sshPublisherDesc(configName: 'SA_WD_Tomcat_Server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/*.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])		
	
	
	
	Email Notifications :::::::
	
		In Jenkins Pipeline Jobs, Email Notifications can be done as a post build action.
		
		
		Stage{}
		post{
			success 
			failure 
			abort
		}
		
	To Setup the Email Notifications, First we need to set the Email Server in the Jenkins System configuration :


How to setup the Email Server in the Jenkins Config:

goto manage jenkins -> system configuration 

goto Email Notification 
		
SMTP Server :
smtp.gmail.com

SMTP Authentication

SMTP Port :: 465

Login to Gmail :::

Click Manage Account Settings

@Left side panel - select Security 

MFA --> mobile#

App Password = 16 bytes of App Password. vazr vauf xhd bnl l

What ? window
Which Appln - email			
		

pipeline {
    agent { label 'slave1' }

    stages {
        stage('SCM Checkout') {
            steps {
                echo 'Perfomr SCM Check-Out'
				echo 'Cloning Java Maven App Code'
				git 'https://github.com/SA-AWS-DevOps-July24/java-mvn-springbootapp.git'
            }
             post {
                failure {
                  sh "echo 'Send mail on failure'"
					mail bcc: 'l@gmail.com', body: 'Jenkins Jobs Status ', cc: 'l@gmail.com', from: '', replyTo: '', subject: 'SCM-Checkout Failed ', to: 'l@gmail.com'
					
					
                }
              }
        }
        stage('Java Application Build') {
            steps {
                echo 'Perform Java Maven Application Build'
                sh 'mvn clean package'
            }
             post {
                failure {
                  sh "echo 'Send mail on failure'"
					mail bcc: 'l@gmail.com', body: 'Jenkins Jobs Status ', cc: 'l@gmail.com', from: '', replyTo: '', subject: 'App Build Failed ', to: 'l@gmail.com'
                }
              }
        }
        stage('Deploy to Tomcat_Server') {
            steps {
 				script {
 				    sshPublisher(publishers: [sshPublisherDesc(configName: 'SA-Tomcat_Server', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/mvn-hello-world.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])					
 				}
                
            }
             post {
                failure {
                  sh "echo 'Send mail on failure'"
					mail bcc: 'l@gmail.com', body: 'Jenkins Jobs Status ', cc: 'l@gmail.com', from: '', replyTo: '', subject: 'App Deployment Failed ', to: 'l@gmail.com'
                }
                success {
                  sh "echo 'Send mail on Successful'"
					mail bcc: 'l@gmail.com', body: "jenkins-${JOB_NAME}-${BUILD_NUMBER}", cc: 'l@gmail.com', from: '', replyTo: '', subject: 'App Deployment Successful ', to: 'l@gmail.com'
                }
              }
        }
    }
}


